# -*- coding: utf-8 -*-
import glob
import subprocess
import atexit

# Form implementation generated from reading ui file 'Shangyi7.22wu2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from ast import Import
from http.client import ImproperConnectionState
import json
import os
import sys
from random import randint

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, pyqtSignal, QPointF, QRectF, QTimer
from PyQt5.QtGui import QPixmap, QPainter, QPen, QColor, QBrush, QPainterPath
from PyQt5.QtWidgets import QWidget, QFileDialog, QMessageBox, QGraphicsScene, \
    QGraphicsPixmapItem, QGraphicsView, QGraphicsItem, QGraphicsEllipseItem, QInputDialog, QListWidgetItem, \
    QGraphicsRectItem, QFrame, QGraphicsPathItem

import base64
from PIL import Image
import io
############################################
# from safetensors.torch import load_model
# from tools.demo_test import load_mmdet_model


###############################################
# from MODEL.Mode import *

class Ui_ShangYi(object):
    def setupUi(self, ShangYi):
        ShangYi.setObjectName("ShangYi")
        ShangYi.setGeometry(150, 70, 1610, 960)  
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../image/图标.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        ShangYi.setWindowIcon(icon)  
        ShangYi.setFixedSize(ShangYi.width(), ShangYi.height())
        self.label = QtWidgets.QLabel(ShangYi)
        self.label.setGeometry(QtCore.QRect(550, 15, 216, 26))
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.dockWidget = QtWidgets.QDockWidget(ShangYi)
        self.dockWidget.setGeometry(QtCore.QRect(1205, 60, 400, 200))
        self.dockWidget.setObjectName("dockWidget")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.dockWidgetContents)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.listWidget_4 = QtWidgets.QListWidget(self.dockWidgetContents)
        self.listWidget_4.setObjectName("listWidget_4")
        self.gridLayout_4.addWidget(self.listWidget_4, 0, 0, 1, 1)
        self.dockWidget.setWidget(self.dockWidgetContents)
        self.dockWidget_2 = QtWidgets.QDockWidget(ShangYi)
        self.dockWidget_2.setGeometry(QtCore.QRect(1205, 265, 400, 220))
        self.dockWidget_2.setObjectName("dockWidget_2")
        self.dockWidgetContents_2 = QtWidgets.QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.dockWidgetContents_2)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.listWidget = QtWidgets.QListWidget(self.dockWidgetContents_2)
        self.listWidget.setObjectName("listWidget")
        self.gridLayout_3.addWidget(self.listWidget, 0, 0, 1, 1)
        self.dockWidget_2.setWidget(self.dockWidgetContents_2)
        # TODO:这一部分隐藏会有bug
        self.dockWidget_3 = QtWidgets.QDockWidget(ShangYi)
        self.dockWidget_3.setGeometry(QtCore.QRect(1205, 490, 400, 220))
        self.dockWidget_3.setObjectName("dockWidget_3")
        self.dockWidgetContents_3 = QtWidgets.QWidget()
        self.dockWidgetContents_3.setObjectName("dockWidgetContents_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.dockWidgetContents_3)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.listWidget_3 = QtWidgets.QListWidget(self.dockWidgetContents_3)
        self.listWidget_3.setObjectName("listWidget_3")
        self.gridLayout_2.addWidget(self.listWidget_3, 0, 0, 1, 1)
        self.dockWidget_3.setWidget(self.dockWidgetContents_3)
        self.dockWidget_4 = QtWidgets.QDockWidget(ShangYi)
        self.dockWidget_4.setGeometry(QtCore.QRect(1205, 715, 400, 205))
        self.dockWidget_4.setObjectName("dockWidget_4")
        self.dockWidgetContents_4 = QtWidgets.QWidget()
        self.dockWidgetContents_4.setObjectName("dockWidgetContents_4")
        self.gridLayout = QtWidgets.QGridLayout(self.dockWidgetContents_4)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.listWidget_2 = QtWidgets.QListWidget(self.dockWidgetContents_4)
        self.listWidget_2.setObjectName("listWidget_2")
        self.gridLayout.addWidget(self.listWidget_2, 0, 0, 1, 1)
        self.dockWidget_4.setWidget(self.dockWidgetContents_4)
        self.label_2 = QtWidgets.QLabel(ShangYi)
        self.label_2.setGeometry(QtCore.QRect(1100, 260, 60, 30))
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")

        self.b0 = QtWidgets.QToolButton(ShangYi)
        self.b0.setGeometry(QtCore.QRect(10, 20, 100, 45))
        icon1 = QtGui.QIcon()

        icon1.addPixmap(QtGui.QPixmap("../image/打开文件.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b0.setIcon(icon1)
        self.b0.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b0.setObjectName("b0")

        self.b1 = QtWidgets.QToolButton(ShangYi)
        self.b1.setGeometry(QtCore.QRect(10, 100, 100, 45))
        icon1 = QtGui.QIcon()

        icon1.addPixmap(QtGui.QPixmap("../image/打开文件.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b1.setIcon(icon1)
        self.b1.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b1.setObjectName("b1")

        self.show_det_res_Button = QtWidgets.QToolButton(ShangYi)
        self.show_det_res_Button.setGeometry(QtCore.QRect(1090, 280, 100, 45))  # 不适用隐藏按键
        self.show_det_res_Button.setObjectName("toolButton")
        self.shut_down_det_res_Button = QtWidgets.QToolButton(ShangYi)
        self.shut_down_det_res_Button.setGeometry(QtCore.QRect(1090, 330, 100, 45))  # 不适用隐藏按键
        self.shut_down_det_res_Button.setObjectName("toolButton")





        self.toolButton = QtWidgets.QToolButton(ShangYi)
        self.toolButton.setGeometry(QtCore.QRect(1090, 380, 100, 45))
        self.toolButton.setObjectName("toolButton")
        self.toolButton_2 = QtWidgets.QToolButton(ShangYi)
        self.toolButton_2.setGeometry(QtCore.QRect(1090, 440, 100, 45))
        self.toolButton_2.setObjectName("toolButton_2")
        self.b2 = QtWidgets.QToolButton(ShangYi)
        self.b2.setGeometry(QtCore.QRect(10, 200, 100, 45))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../image/打开目录.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b2.setIcon(icon2)
        self.b2.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b2.setObjectName("b2")
        self.b11 = QtWidgets.QToolButton(ShangYi)
        self.b11.setGeometry(QtCore.QRect(1090, 500, 100, 45))
        self.b11.setObjectName("b11")
        self.b4 = QtWidgets.QToolButton(ShangYi)
        self.b4.setGeometry(QtCore.QRect(10, 300, 100, 45))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("/home/semi/桌面/ShangYiDemo/src/image/标记.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b4.setIcon(icon3)
        self.b4.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b4.setObjectName("b4")
        self.b10 = QtWidgets.QToolButton(ShangYi)
        self.b10.setGeometry(QtCore.QRect(1090, 560, 100, 45))
        self.b10.setObjectName("b10")
        self.b3 = QtWidgets.QToolButton(ShangYi)
        self.b3.setGeometry(QtCore.QRect(10, 400, 100, 45))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../image/脉络.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b3.setIcon(icon4)
        self.b3.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b3.setObjectName("b3")
        self.b5 = QtWidgets.QToolButton(ShangYi)
        self.b5.setGeometry(QtCore.QRect(10, 500, 100, 45))
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../image/删除.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b5.setIcon(icon5)
        self.b5.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b5.setObjectName("b5")
        self.b6 = QtWidgets.QToolButton(ShangYi)
        self.b6.setGeometry(QtCore.QRect(10, 600, 100, 45))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("../image/模型.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b6.setIcon(icon6)
        self.b6.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b6.setObjectName("b6")
        self.b7 = QtWidgets.QToolButton(ShangYi)
        self.b7.setGeometry(QtCore.QRect(10, 700, 100, 45))
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("../image/暂停.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b7.setIcon(icon7)
        self.b7.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b7.setObjectName("b7")
        self.b8 = QtWidgets.QToolButton(ShangYi)
        self.b8.setGeometry(QtCore.QRect(10, 800, 100, 45))
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("../image/save.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.b8.setIcon(icon8)
        self.b8.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.b8.setObjectName("b8")
        self.label_3 = QtWidgets.QLabel(ShangYi)
        self.label_3.setGeometry(QtCore.QRect(1100, 700, 75, 30))
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")

        self.graphicsViewRealTime = GraphicsView(ShangYi)
        self.graphicsViewRealTime.setGeometry(QtCore.QRect(120, 60, 950, 860))  # 修改
        self.graphicsViewRealTime.setObjectName("graphicsView")
        self.graphicsViewRealTime.hide()

        self.graphicsView_show_res = GraphicsView(ShangYi)
        self.graphicsView_show_res.setGeometry(QtCore.QRect(1205, 60, 400, 800))
        self.graphicsView_show_res.setObjectName("graphicsView_show_res")
        self.graphicsView_show_res.hide()

        self.graphicsView = GraphicsView(ShangYi)
        self.graphicsView.setGeometry(QtCore.QRect(120, 60, 950, 430))
        self.graphicsView.setObjectName("graphicsView")
        self.graphicsView.show()

        self.graphicsView_2 = GraphicsView(ShangYi)
        self.graphicsView_2.setGeometry(QtCore.QRect(120, 500, 950, 430))
        self.graphicsView_2.setObjectName("graphicsView_2")


        self.comboBox = QtWidgets.QComboBox(ShangYi)
        self.comboBox.setGeometry(QtCore.QRect(1260, 40, 171, 21))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(["选择模型", "Yolov3(默认)", "DiffusionDet", "ViTDet"])
        self.label_4 = QtWidgets.QLabel(ShangYi)
        self.label_4.setGeometry(QtCore.QRect(1210, 40, 41, 16))
        self.label_4.setObjectName("label_4")

        self.config_file_path = "model_path/yolov3/yolov3.py"
        self.model_weights_path = "model_path/yolov3/epoch_119.pth"
        self.detection_process = subprocess.Popen(['python','tools/scrip_intfere.py'],stdin=subprocess.PIPE,stdout=subprocess.PIPE)#创建检测进程
        atexit.register(self.detection_process.kill)
        self.i = 0
        self.labelList = []

        self.retranslateUi(ShangYi)
        QtCore.QMetaObject.connectSlotsByName(ShangYi)
        
    static_pushnum = 1

    def hidden(self):
        self.graphicsViewRealTime.show()
        self.graphicsView.hide()
        self.graphicsView_2.hide()
        self.label_2.hide()
        self.toolButton.hide()
        self.toolButton_2.hide()
        self.b11.hide()
        self.b10.hide()
        self.label_3.hide()
        self.dockWidget.setVisible(False)
        self.dockWidget_2.setVisible(False)
        self.dockWidget_3.hide()
        self.dockWidget_4.setVisible(False)

        # self.static_pushnum += 1
        # if self.static_pushnum % 2 == 0:
        #     self.dockWidget.setVisible(False)
        #     self.dockWidget_2.setVisible(False)
        #     self.dockWidget_3.setVisible(False)
        #     self.dockWidget_4.setVisible(False)
        # else:
        #     self.dockWidget.setVisible(True)
        #     self.dockWidget_2.setVisible(True)
        #     self.dockWidget_3.setVisible(True)
        #     self.dockWidget_4.setVisible(True)
        # self.dockWidget.setGeometry(QtCore.QRect(1205, 60, 400, 200))
        # self.dockWidget_2.setGeometry(QtCore.QRect(1205, 470, 398, 205))

    def myshow(self):
        self.timer.stop()
        self.graphicsViewRealTime.hide()
        self.graphicsView.show()
        self.graphicsView_2.show()
        self.graphicsView_show_res.hide()
        self.dockWidget.setVisible(True)
        self.dockWidget_2.setVisible(True)
        self.dockWidget_3.show()
        self.dockWidget_4.setVisible(True)
        self.label_2.show()
        self.toolButton.show()
        self.toolButton_2.show()
        self.b11.show()
        self.b10.show()
        self.label_3.show()

    def retranslateUi(self, ShangYi):
        _translate = QtCore.QCoreApplication.translate
        ShangYi.setWindowTitle(_translate("ShangYi", "珠海轨道交通智测"))
        self.label.setText(_translate("ShangYi",
                                      "<html><head/><body><p><span style=\" font-size:11pt; font-weight:700;\">珠海轨道交通智测软件</span></p></body></html>"))
        self.dockWidget.setWindowTitle(_translate("ShangYi", "Flags"))
        self.dockWidget_2.setWindowTitle(_translate("ShangYi", "Label List"))
        self.dockWidget_3.setWindowTitle(_translate("ShangYi", "Polygon Labels"))
        self.dockWidget_4.setWindowTitle(_translate("ShangYi", "File List"))
        self.label_2.setText(_translate("ShangYi", "原始图像"))
        self.b0.setText(_translate("ShangYi", " 实况目录 "))
        # self.b0.setShortcut(_translate("ShangYi", "Ctrl+O"))
        self.b1.setText(_translate("ShangYi", " 打开图像 "))
        self.b1.setShortcut(_translate("ShangYi", "Ctrl+O"))
        self.toolButton.setText(_translate("ShangYi", "  上一张  "))
        self.toolButton_2.setText(_translate("ShangYi", "  下一张  "))
        self.b2.setText(_translate("ShangYi", " 打开目录 "))
        self.b2.setShortcut(_translate("ShangYi", "Ctrl+U"))
        self.b11.setText(_translate("ShangYi", "单个预标注"))
        # self.b4.setText(_translate("ShangYi", "更新关键点"))
        self.b4.setText(_translate("ShangYi", "更新标注"))
        self.b10.setText(_translate("ShangYi", "批量预标注"))
        self.b3.setText(_translate("ShangYi", "更新矩形框"))
        self.b5.setText(_translate("ShangYi", "删除关键点"))
        self.b6.setText(_translate("ShangYi", " 加载模型 "))
        # self.b7.setText(_translate("ShangYi", " 更新脉络 "))
        self.b7.setText(_translate("ShangYi", " 更新铁轨识别 "))
        self.b8.setText(_translate("ShangYi", "   保存   "))
        self.b8.setShortcut(_translate("ShangYi", "Ctrl+S"))
        self.label_3.setText(_translate("ShangYi", "预标注结果"))
        self.label_4.setText(_translate("ShangYi", "模型："))

        self.directory = None
        self.current_files = set()
        self.current_file = None
        self.timer = QTimer(ShangYi)
        self.timer.timeout.connect(self.check_new_files)

        self.show_det_res = False

        # 实况按钮
        self.b0.clicked.connect(self.select_directory)
        self.b1.clicked.connect(self.openImage)
        self.b2.clicked.connect(self.openfiles)
        # 实时检测显示按钮
        self.show_det_res_Button.setText(_translate("ShangYi", "  开启检测  "))
        self.show_det_res_Button.clicked.connect(self.show_det_result)
        self.show_det_res_Button.hide()

        self.shut_down_det_res_Button.setText(_translate("ShangYi", "  关闭检测  "))
        self.shut_down_det_res_Button.clicked.connect(self.shut_down_det_res)
        self.shut_down_det_res_Button.hide()


        self.toolButton.clicked.connect(self.preImg)
        self.toolButton_2.clicked.connect(self.nextImg)

        self.listWidget_2.currentRowChanged.connect(self.pic_display)
        self.graphicsView.pointsSignal.connect(self.pointsSignalSlot)
        self.graphicsView.pointsSignal2.connect(self.pointsSignal2Slot)
        self.listWidget_3.currentRowChanged.connect(self.listSelectionChanged)
        self.b4.clicked.connect(self.graphicsView.slotpointSignal)
        self.b3.clicked.connect(self.graphicsView.slotrectSignal)
        self.b8.clicked.connect(self.save)
        self.b5.clicked.connect(self.delete)
        self.b6.clicked.connect(self.detection)
        self.b7.clicked.connect(self.draw_and_connect_keypoints)

        self.b0.clicked.connect(self.hidden)
        self.b1.clicked.connect(self.myshow)
        self.b2.clicked.connect(self.myshow)
        self.b3.clicked.connect(self.myshow)
        self.b4.clicked.connect(self.myshow)
        self.b5.clicked.connect(self.myshow)
        self.b6.clicked.connect(self.myshow)
        self.b7.clicked.connect(self.myshow)

        self.comboBox.currentIndexChanged.connect(self.modeSelectionChanged)

    def detection(self):
        if self.curr_pic and self.config_file_path and  self.model_weights_path:
            print('detection(self): True')

            coor = load_model(self.curr_pic, self.config_file_path, self.model_weights_path)
            image2 = QPixmap(self.curr_pic)
            k = self.graphicsView.height() / image2.height()
            data = coor.pred_keypoints
            data = data.tolist()
            keypoints1 = data[0]

            for i in range(len(keypoints1)):
                points = keypoints1[i]
                x1, y1, z1 = points
                x2 = x1 * k
                y2 = y1 * k
                shape = GraphicItem()
                shape.setPos(x2, y2)
                color1, color2, color3 = self.graphicsView.getColor()
                shape.setBrush(QColor(color1, color2, color3))

                text = self.graphicsView.acupuncturepoints[i]
                item = ListWidgetItem(text)
                self.listWidget_3.addItem(item)
                self.graphicsView.itemsToShapes[text] = shape
                self.graphicsView.shapesToItems[shape] = text
                self.graphicsView.scene.addItem(shape)
                self.graphicsView.bboxList.append([shape])
                self.graphicsView.savePoint(x2, y2, text)

    def modeSelectionChanged(self):
        modetext = self.comboBox.currentText()
        if modetext == "Yolov3":
            self.config_file_path = "model_path/yolov3/yolov3.py"
            self.model_weights_path = "model_path/yolo/epoch_119.pth"

        elif modetext == "DiffusionDet":
            self.config_file_path = "model_path/diffusionDet/diffusiondet_r50_fpn_500-proposals_1-step_crop-ms-480-800-450k_coco.py"
            self.model_weights_path = "model_path/diffusionDet/iter_45000.pth"
        elif modetext == "ViTDet":
            self.config_file_path = "model_path/ViTDet/vitdet_mask-rcnn_vit-b-mae_lsj-100e.py"
            self.model_weights_path = "model_path/ViTDet/iter_165000.pth"
        # self.detection_process.communicate("-m "+modetext)
        detect_output="-m"+" "+modetext+"\n"
        self.detection_process.stdin.write(detect_output.encode("utf-8"))
        self.detection_process.stdin.flush()
        print("put ok")
        # self.detection_process.wait()
        # self.detection_process.stdout.readline()

    def pointsSignalSlot(self,text):  #标记名展示在右侧列表
        self.listWidget_3.clearSelection()
        item = ListWidgetItem(text)
        self.listWidget_3.addItem(item)
     
    def pointsSignal2Slot(self, index):  #图元选中列表名相应选中
        self.listWidget_3.clearSelection()
        self.listWidget_3.setCurrentRow(index)

    def listSelectionChanged(self):  #列表中选图元相应选中
        self.graphicsView.scene.clearSelection()
        items = self.listWidget_3.currentItem()
        if items:
            content = items.text()
            self.graphicsView.scene.selectshape(self.graphicsView.itemsToShapes[content])

    def openImage(self):  #打开单个文件
        global file
        self.graphicsView.scene.clear()

        file, filetype = QFileDialog.getOpenFileName(None, "打开文件", " . ", "图像文件(*.jpg *.png)")
        if file:
            img = QPixmap(file)
            w = int(img.width() * self.graphicsView.height() / img.height())
            self.image2 = img.scaled(w, self.graphicsView.height())
            picture = QGraphicsPixmapItem(self.image2)
            self.graphicsView.scene.addItem(picture)

            # self.graphicsView.scene.addPixmap(img)
            self.listWidget_2.clear()
            self.listWidget_2.addItem(file)

    def check_new_files(self):
        print('执行一次check_new_files')
        if self.directory:
            new_files = set(os.listdir(self.directory))
            added_files = new_files - self.current_files

            for file in added_files:
                print('added_files：' + file)
                file_path = os.path.join(self.directory, file)
                print('file_path：' + file_path)
                print(os.path.isfile(file_path) and file.lower().endswith(('.jpg', '.png', '.bmp')))
                if os.path.isfile(file_path) and file.lower().endswith(('.jpg', '.png', '.bmp')):
                    image = QPixmap(file_path)
                    print('file_path' + file_path)
                    self.current_file = file_path
                    self.show_image(image)
                    if self.show_det_res:


                        self.show_det_result()

                    print(file_path)
                    # self.listWidget_2.addItem(file_path)



            self.current_files = new_files
            # print(self.current_files)

    def show_image(self, image):

        self.graphicsViewRealTime.scene.clear()
        self.graphicsViewRealTime.bboxPointList.clear()
        self.graphicsViewRealTime.bboxList.clear()
        self.graphicsViewRealTime.itemsToShapes.clear()
        self.graphicsViewRealTime.shapesToItems.clear()

        # w = int(image.width() * self.graphicsView.height() / image.height())
        # w = 1080
        # self.image2 = image.scaled(self.graphicsView.height(), self.graphicsView.height(),Qt.KeepAspectRatioByExpanding)
        self.image2 = image.scaled(self.graphicsViewRealTime.height(), self.graphicsViewRealTime.height(), Qt.IgnoreAspectRatio)
        # self.image2 = image.scaled(self.graphicsView.height(),self.graphicsView.height(),KeepAspectRatio=False)
        picture = QGraphicsPixmapItem(self.image2)
        self.graphicsViewRealTime.scene.addItem(picture)

    def get_latest_image(self, folder_path):
        # 获取文件夹下所有的图片文件（假设图片格式为jpg、png、jpeg等）
        # 不应该说是这样，没有图片也需要等一会
        image_files = glob.glob(os.path.join(folder_path, '*.[jp][pn]g'))

        if not image_files:
            print("No images found in the folder.")
            return None

        # 找到最新添加的图片
        latest_image = max(image_files, key=os.path.getctime)

        return latest_image

    def show_warning(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setText("警告")
        msg.setInformativeText("file_path 没有对应的图片")
        msg.setWindowTitle("警告")
        msg.exec_()

    def shut_down_det_res(self):
        self.show_det_res = False

        self.graphicsView_show_res.scene.clear()
        self.graphicsView_show_res.bboxPointList.clear()
        self.graphicsView_show_res.bboxList.clear()
        self.graphicsView_show_res.itemsToShapes.clear()
        self.graphicsView_show_res.shapesToItems.clear()


    def show_det_result(self):
        if not self.show_det_res:
            self.show_det_res = True


        self.graphicsView_show_res.show()
        # 当前显示的图片
        if self.current_file:

            file_path = self.current_file

            print('实时检测改图： ' + file_path)

            print('config_file:' + self.config_file_path)
            detect_output="-p"+" "+file_path+"\n"
            self.detection_process.stdin.write(detect_output.encode("utf-8"))
            # self.detection_process.stdin.flush()

            # self.detection_process.communicate("-p"+file_path)
            # subprocess.call(
            #     ['python', 'tools/scrip_intfere.py', file_path, self.config_file_path, self.model_weights_path])
            # subprocess.call(['python','tools/scrip_intfere.py','%s','%s','%s']%(file_path,self.config_file_path,self.model_weights_path))
            result_img_path = os.path.join('./detect_results' , os.path.basename(file_path))
            print('检测结果 result_img_path: '+result_img_path)
            if os.path.isfile(result_img_path):

                result_img = QPixmap(result_img_path)



                # result_img = QPixmap(load_mmdet_model(file_path))

                # w = int(result_img.width() * self.graphicsView_show_res.height() / result_img.height())
                # h = int(result_img.height()* self.graphicsView_show_res.height() / result_img.height())
                # image2 = result_img.scaled(self.graphicsView_show_res.width(),h)
                self.image2 = result_img.scaled(self.graphicsView_show_res.width(), self.graphicsView_show_res.height(),
                                                Qt.IgnoreAspectRatio)

                picture = QGraphicsPixmapItem(self.image2)

                self.graphicsView_show_res.scene.clear()
                self.graphicsView_show_res.bboxPointList.clear()
                self.graphicsView_show_res.bboxList.clear()
                self.graphicsView_show_res.itemsToShapes.clear()
                self.graphicsView_show_res.shapesToItems.clear()
                self.graphicsView_show_res.scene.addItem(picture)
            else:
                self.graphicsView_show_res.scene.clear()
                self.graphicsView_show_res.bboxPointList.clear()
                self.graphicsView_show_res.bboxList.clear()
                self.graphicsView_show_res.itemsToShapes.clear()
                self.graphicsView_show_res.shapesToItems.clear()



    def select_directory(self):
        self.show_det_res_Button.show()  # 展示实况检测按钮
        self.shut_down_det_res_Button.show()
        self.current_file = None

        self.directory = QFileDialog.getExistingDirectory()
        if self.directory:
            self.graphicsView.scene.clear()
            self.graphicsView.bboxPointList.clear()
            self.graphicsView.bboxList.clear()
            self.graphicsView.itemsToShapes.clear()
            self.graphicsView.shapesToItems.clear()
            self.graphicsView_show_res.scene.clear()
            self.graphicsView_show_res.bboxPointList.clear()
            self.graphicsView_show_res.bboxList.clear()
            self.graphicsView_show_res.itemsToShapes.clear()
            self.graphicsView_show_res.shapesToItems.clear()
            # 获取选定目录的结果
            self.current_files = set(os.listdir(self.directory))
            self.current_file = None
            self.listWidget_2.clear()

            if not self.timer.isActive():
                self.timer.start(5000)
            #     直接获取当前文件夹的文件目录
            # for file in self.current_files:
            #     file_path = os.path.join(self.directory, file)
            #     if os.path.isfile(file_path) and file.lower().endswith(('.jpg', '.png')):
            #         self.listWidget_2.addItem(file_path)

    def openfiles(self):  #打开文件夹
        self.label_path = QFileDialog.getExistingDirectory()
        self.files = []
        ext_lst = ['.jpg', '.JPG', '.bmp']
        if self.label_path == "":
            pass
        else:
            file_lst = os.listdir(self.label_path)
            for file in file_lst:
                name_ext = os.path.splitext(file)
                if name_ext[1] in ext_lst:
                    self.files.append(file)
            self.curr_pic = self.label_path + "/" + self.files[0]
            image = QPixmap(self.curr_pic)
            self.showImg(image)
            self.showImg2(image)
            # 清空listWidget，
            self.listWidget_2.clear()
            for i in range(0, len(self.files)):
                self.listWidget_2.insertItem(i, self.label_path + "/" + self.files[i])

    def read_json(self, file_path):  #解析json
        with open(file_path, encoding='utf-8') as f:
            json_list = json.load(f)

        shapes = json_list['shapes']
        fileName = json_list['imagePath']
        fileName = fileName.split('.')[:-1]
        fileName.append('label.png')
        fileName = '_'.join(fileName)
        self.visible = {}

        for i in range(len(shapes)):
            points = shapes[i]['points']
            if len(points) > 3:
                x1, y1, x2, y2 = points
                text = shapes[i]['label']
                item = ListWidgetItem(text)
                self.listWidget_3.addItem(item)
                item = GraphicsRectItem(x1, y1, x2 - x1, y2 - y1)
                self.graphicsView.itemsToShapes[text] = item  
                self.graphicsView.shapesToItems[item] = text
                self.graphicsView.saveRect(x1, y1, x2, y2, text)
                self.graphicsView.bboxList.append([item])
                self.graphicsView.scene.addItem(item)
            else:
                pass

        for i in range(len(shapes)):
            points = shapes[i]['points']  
            if len(points) > 3:
                pass
            else:
                x1, y1 = points
                text = shapes[i]['label']
                self.visible[text] = x1, y1
                item = ListWidgetItem(text)
                self.listWidget_3.addItem(item)
                shape = GraphicItem()
                shape.setPos(x1, y1)           
                color1, color2, color3 = self.graphicsView.getColor()
                shape.setBrush(QColor(color1, color2, color3))
                self.graphicsView.itemsToShapes[text] = shape
                self.graphicsView.shapesToItems[shape] = text
                self.graphicsView.scene.addItem(shape)
                self.graphicsView.bboxList.append([shape])
                self.graphicsView.savePoint(x1, y1, text)

    def read_json2(self, file_path):
        with open(file_path, encoding='utf-8') as f:
            json_list = json.load(f)
        shapes = json_list['shapes']
        fileName = json_list['imagePath']
        fileName = fileName.split('.')[:-1]
        fileName.append('label.png')
        fileName = '_'.join(fileName)

        for i in range(len(shapes)):
            points = shapes[i]['points']
            if len(points) > 3:
                x1, y1, x2, y2 = points
                item = GraphicsRectItem(x1, y1, x2 - x1, y2 - y1)
                self.graphicsView_2.scene.addItem(item)
            else:
                x1, y1 = points
                shape = GraphicItem()
                shape.setPos(x1, y1)
                color1, color2, color3 = self.graphicsView.getColor()
                shape.setBrush(QColor(color1, color2, color3))
                self.graphicsView_2.scene.addItem(shape)

    def draw_and_connect_keypoints(self):
        for kp0, kp1, color in self.graphicsView.MIDDLE_DOWN_WAI_KEYPOINT_CONNECTION_RULES:
            if kp0 in self.visible and kp1 in self.visible: 
                # x0, y0 = self.visible[kp0]
                # x1, y1 = self.visible[kp1]
                item1 = self.graphicsView.itemsToShapes[kp0]
                item2 = self.graphicsView.itemsToShapes[kp1]
                self.color = color
                self.gr_edge = Edge(self.graphicsView.scene, item1, item2, color)
                self.gr_edge.store()

    def showImg(self, image):  #图片显示
        self.listWidget_3.clear()
        self.graphicsView.scene.clear()
        self.graphicsView.bboxPointList.clear()
        self.graphicsView.bboxList.clear()
        self.graphicsView.itemsToShapes.clear()
        self.graphicsView.shapesToItems.clear()

        w = int(image.width() * self.graphicsView.height() / image.height())
        self.image2 = image.scaled(w, self.graphicsView.height())
        picture = QGraphicsPixmapItem(self.image2)
        self.graphicsView.scene.addItem(picture)
        json_path = self.curr_pic.split(".")[0] + ".json"
        if os.path.exists(json_path):
            self.read_json(json_path)

    def showImg2(self, image):  #图片显示在另一控件
        self.graphicsView_2.scene.clear()
        w = int(image.width() * self.graphicsView_2.height() / image.height())
        self.image2 = image.scaled(w, self.graphicsView_2.height())
        picture = QGraphicsPixmapItem(self.image2)
        self.graphicsView_2.scene.addItem(picture)

        json_path = self.curr_pic.split(".")[0] + ".json"
        if os.path.exists(json_path):
            self.read_json2(json_path)

    def preImg(self):  #切换上一张图片
        if self.i > 0:
            self.i -= 1
            self.curr_pic = self.label_path + "/" + self.files[self.i]
            image = QPixmap(self.curr_pic)
            self.showImg(image)
            self.showImg2(image)
        else:
            msg = QMessageBox.information(None, "提示", "已经是第一张了！")

    def nextImg(self):  #切换下一张图片
        if self.i < len(self.files) - 1:
            self.i += 1
            self.curr_pic = self.label_path + "/" + self.files[self.i]
            image = QPixmap(self.curr_pic)
            self.showImg(image)
            self.showImg2(image)
        else:
            msg = QMessageBox.information(None, "提示", "已经是最后一张了！")

    def pic_display(self, i):  # list切换图片
        self.curr_pic = self.label_path + "/" + self.files[i]
        image = QPixmap(self.curr_pic)
        self.showImg(image)
        self.showImg2(image)

    def save(self):  #保存json文件
        A = dict()
        listbigoption = []
        for bbox in self.graphicsView.bboxPointList:
            listobject = dict()
            listxy = bbox[:-1]
            label = bbox[-1]
            listobject['points'] = listxy
            listobject['label'] = str(label)
            listbigoption.append(listobject)

        A['shapes'] = listbigoption
        fileObject = self.curr_pic.split('/')
        filename = fileObject[-1]
        A['imagePath'] = str(filename)
        A['imageData'] = self.base64encode_img(self.curr_pic)
        name = os.path.splitext(filename)[0]
        filepath, type = QFileDialog.getSaveFileName(None, '文件保存', name, 'json(*.json)')
        with open(filepath, 'w', encoding='utf-8') as file_obj:
            json.dump(A, file_obj, indent=4, ensure_ascii=False)

    def base64encode_img(self, image_path):  #图片信息转为base64编码
        src_image = Image.open(image_path)
        output_buffer = io.BytesIO()
        src_image.save(output_buffer, format='JPEG')
        byte_data = output_buffer.getvalue()
        base64_str = base64.b64encode(byte_data).decode('utf-8')
        return base64_str

    def delete(self):  #删除标记
        items = self.graphicsView.scene.selectedItems()
        if len(items) > 0:
            index = self.graphicsView.findBboxItemIndexFromItem(items[0])

            self.graphicsView.scene.removeItem(items[0])
            del self.graphicsView.bboxList[index]
            selectindex = self.listWidget_3.currentIndex()
            itemmodel = self.listWidget_3.model()
            itemmodel.removeRow(selectindex.row())
            del self.graphicsView.bboxPointList[index]

            self.graphicsView.scene.clearSelection()
            self.listWidget_3.clearSelection()

class Edge:

    def __init__(self, scene, start_item, end_item, color):
        super().__init__()
        self.scene = scene
        self.start_item = start_item
        self.end_item = end_item
        self.gr_edge = GraphicEdge(self, color)
        self.scene.add_edge(self.gr_edge)

        if self.start_item is not None:
            self.update_positions()

    def store(self):
        self.scene.add_edge(self.gr_edge)

    def update_positions(self):  
        patch = 2
        src_pos = self.start_item.pos()  
        self.gr_edge.set_src(src_pos.x()+patch, src_pos.y()+patch)
        if self.end_item is not None:
            end_pos = self.end_item.pos()
            self.gr_edge.set_dst(end_pos.x()+patch, end_pos.y()+patch)
        else:
            self.gr_edge.set_dst(src_pos.x()+patch, src_pos.y()+patch)
        self.gr_edge.update()

class GraphicEdge(QGraphicsPathItem):

    def __init__(self, edge_wrap, color, parent=None):
        super().__init__(parent)
        self.edge_wrap = edge_wrap
        self.width = 1.0
        self.pos_src = [0, 0]  
        self.pos_dst = [0, 0]  
        self._pen = QPen() 
        self._pen.setColor(QColor(color[0], color[1], color[2]))
        self._pen.setWidthF(self.width)

        self._mark_pen = QPen(Qt.green)
        self._mark_pen.setWidthF(self.width)
        self._mark_brush = QBrush()
        self._mark_brush.setColor(Qt.green)
        self._mark_brush.setStyle(Qt.SolidPattern)

        self.setFlag(QGraphicsItem.ItemIsSelectable)
        self.setZValue(1)  

    def set_src(self, x, y):
        self.pos_src = [x, y]

    def set_dst(self, x, y):
        self.pos_dst = [x, y]

    def calc_path(self):
        path = QPainterPath(QPointF(self.pos_src[0], self.pos_src[1]))
        path.lineTo(self.pos_dst[0], self.pos_dst[1])
        return path

    def boundingRect(self):
        return self.shape().boundingRect()

    def shape(self):
        return self.calc_path()

    def paint(self, painter, graphics_item, widget=None):
        self.setPath(self.calc_path())
        path = self.path()

        painter.setPen(self._pen)
        painter.drawPath(path)

        painter.setPen(self._mark_pen)
        painter.setBrush(self._mark_brush)

class GraphicsView(QGraphicsView):
    pointsSignal = pyqtSignal(str)
    pointsSignal2 = pyqtSignal(int)

    MIDDLE_DOWN_WAI_KEYPOINT_CONNECTION_RULES = [
        ("L-sanjiao-1", "L-sanjiao-2", (0, 255, 0)),
        ("L-sanjiao-2", "L-sanjiao-3", (0, 255, 0)),
        ("L-sanjiao-3", "L-sanjiao-4", (0, 255, 0)),
        ("L-sanjiao-4", "L-sanjiao-5", (0, 255, 0)),
        ("L-sanjiao-5", "L-sanjiao-6", (0, 255, 0)),
        ("L-sanjiao-6", "L-sanjiao-7", (0, 255, 0)),

        ("L-sanjiao-8", "L-sanjiao-9", (0, 255, 0)),
        ("L-sanjiao-9", "R-sanjiao-1", (0, 255, 0)),
        ("R-sanjiao-1", "R-sanjiao-2", (0, 255, 0)),
        ("R-sanjiao-2", "R-sanjiao-3", (0, 255, 0)),
        ("R-sanjiao-3", "R-sanjiao-4", (0, 255, 0)),
        ("R-sanjiao-4", "R-sanjiao-5", (0, 255, 0)),
        ("R-sanjiao-5", "R-sanjiao-6", (0, 255, 0)),
        ("R-sanjiao-6", "R-sanjiao-7", (0, 255, 0)),
        ("R-sanjiao-7", "R-sanjiao-8", (255, 0, 0)),
        ("R-sanjiao-8", "R-sanjiao-9", (255, 0, 0)),
        ("L-pangguang-9", "L-pangguang-10", (255, 0, 0)),
        ("L-pangguang-10", "L-pangguang-11", (255, 0, 0)),
        ("L-pangguang-11", "L-pangguang-12", (255, 0, 0)),
        ("L-pangguang-12", "L-pangguang-13", (255, 0, 0)),
        ("L-pangguang-13", "L-pangguang-14", (255, 0, 0)),
        ("L-pangguang-14", "L-pangguang-15", (255, 0, 0)),
        ("L-pangguang-15", "L-pangguang-16", (255, 0, 0)),
        ("L-pangguang-16", "L-pangguang-17", (255, 0, 0)),
        ("L-pangguang-17", "L-pangguang-18", (255, 0, 0)),
        ("L-pangguang-18", "L-pangguang-19", (255, 0, 0)),
        ("L-pangguang-19", "L-pangguang-20", (255, 0, 0)),
        ("L-pangguang-20", "L-pangguang-21", (255, 0, 0)),
        ("L-pangguang-21", "L-pangguang-22", (255, 0, 0)),
        ("L-pangguang-22", "L-pangguang-23", (255, 0, 0)),
        ("L-pangguang-23", "L-pangguang-24", (255, 0, 0)),
        ("R-pangguang-9", "R-pangguang-10", (255, 0, 0)),
        ("R-pangguang-10", "R-pangguang-11", (255, 0, 0)),
        ("R-pangguang-11", "R-pangguang-12", (255, 0, 0)),
        ("R-pangguang-12", "R-pangguang-13", (255, 0, 0)),
        ("R-pangguang-13", "R-pangguang-14", (255, 0, 0)),
        ("R-pangguang-14", "R-pangguang-15", (255, 0, 0)),
        ("R-pangguang-15", "R-pangguang-16", (255, 0, 0)),
        ("R-pangguang-16", "R-pangguang-17", (255, 0, 0)),
        ("R-pangguang-17", "R-pangguang-18", (255, 0, 0)),
        ("R-pangguang-18", "R-pangguang-19", (255, 0, 0)),
        ("R-pangguang-19", "R-pangguang-20", (255, 0, 0)),
        ("R-pangguang-20", "R-pangguang-21", (255, 0, 0)),
        ("R-pangguang-21", "R-pangguang-22", (255, 0, 0)),
        ("R-pangguang-22", "R-pangguang-23", (255, 0, 0)),
        ("R-pangguang-23", "R-pangguang-24", (255, 0, 0)),
    ]
    

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.scene = GraphicsScene()
        self.setScene(self.scene)
        self.setTransformationAnchor(self.AnchorUnderMouse)
        self.setRenderHints(QPainter.Antialiasing |
                            QPainter.HighQualityAntialiasing |
                            QPainter.TextAntialiasing |
                            QPainter.SmoothPixmapTransform)
        self.setViewportUpdateMode(QGraphicsView.FullViewportUpdate)
        self.setDragMode(self.RubberBandDrag)
        self.setAlignment(Qt.AlignLeft | Qt.AlignTop)

        self.itemsToShapes = {}
        self.shapesToItems = {}
        self.Rectmode = False
        self.bboxPointList = []
        self.labelList = []
        self.bboxList = []

        self.acupuncturepoints = ('L-sanjiao-1', 'L-sanjiao-2', 'L-sanjiao-3', 'L-sanjiao-4', 'L-sanjiao-5',
                'L-sanjiao-6', 'L-sanjiao-7', 'L-sanjiao-8', 'L-sanjiao-9', 'R-sanjiao-1', 'R-sanjiao-2',
                 'R-sanjiao-3', 'R-sanjiao-4', 'R-sanjiao-5','R-sanjiao-6', 'R-sanjiao-7', 'R-sanjiao-8', 'R-sanjiao-9',
                'L-pangguang-9', 'L-pangguang-10', 'L-pangguang-11', 'L-pangguang-12', 'L-pangguang-13',
                'L-pangguang-14', 'L-pangguang-15', 'L-pangguang-16', 'L-pangguang-17', 'L-pangguang-18',
                'L-pangguang-19', 'L-pangguang-20', 'L-pangguang-21', 'L-pangguang-22', 'L-pangguang-23',
                'L-pangguang-24', 'R-pangguang-9', 'R-pangguang-10', 'R-pangguang-11', 'R-pangguang-12',
                'R-pangguang-13', 'R-pangguang-14', 'R-pangguang-15', 'R-pangguang-16', 'R-pangguang-17', 'R-pangguang-18',
                'R-pangguang-19', 'R-pangguang-20', 'R-pangguang-21', 'R-pangguang-22', 'R-pangguang-23',
                'R-pangguang-24', "R-pangguang-7", "R-pangguang-30", "R-pangguang-8", "L-pangguang-7", "L-pangguang-30", "L-pangguang-8")

        self.scene.selectionChanged.connect(self.shapeSelectionChanged)

    def getColor(self):
        color: int
        color1 = randint(0, 255)
        color2 = randint(0, 255)
        color3 = randint(0, 255)
        return color1, color2, color3

    def shapeSelectionChanged(self):  #标记选中改变
        items = self.scene.selectedItems()
        if len(items) > 0:
            index = self.findBboxItemIndexFromItem(items[0])
            self.pointsSignal2.emit(index)

    def mousePressEvent(self, event):  #鼠标按下事件
        super().mousePressEvent(event)
        global text
        acupuncturepoints = ('L-sanjiao-1', 'L-sanjiao-2', 'L-sanjiao-3', 'L-sanjiao-4', 'L-sanjiao-5',
                'L-sanjiao-6', 'L-sanjiao-7', 'L-sanjiao-8', 'L-sanjiao-9', 'R-sanjiao-1', 'R-sanjiao-2',
                 'R-sanjiao-3', 'R-sanjiao-4', 'R-sanjiao-5','R-sanjiao-6', 'R-sanjiao-7', 'R-sanjiao-8', 'R-sanjiao-9',
                'L-pangguang-9', 'L-pangguang-10', 'L-pangguang-11', 'L-pangguang-12', 'L-pangguang-13',
                'L-pangguang-14', 'L-pangguang-15', 'L-pangguang-16', 'L-pangguang-17', 'L-pangguang-18',
                'L-pangguang-19', 'L-pangguang-20', 'L-pangguang-21', 'L-pangguang-22', 'L-pangguang-23',
                'L-pangguang-24', 'R-pangguang-9', 'R-pangguang-10', 'R-pangguang-11', 'R-pangguang-12',
                'R-pangguang-13', 'R-pangguang-14', 'R-pangguang-15', 'R-pangguang-16', 'R-pangguang-17', 'R-pangguang-18',
                'R-pangguang-19', 'R-pangguang-20', 'R-pangguang-21', 'R-pangguang-22', 'R-pangguang-23',
                'R-pangguang-24', "R-pangguang-7", "R-pangguang-30", "R-pangguang-8", "L-pangguang-7", "L-pangguang-30", "L-pangguang-8")
        if event.button() == Qt.RightButton:
            if self.Rectmode:
                pt = self.mapToScene(event.pos())
                self.x1 = pt.x()
                self.y1 = pt.y()
            else:
                pt = self.mapToScene(event.pos())
                self.x1 = pt.x()
                self.y1 = pt.y()
                self.x1_view = event.x()
                self.y1_view = event.y()
                text, ok = QInputDialog().getItem(QWidget(), '添加Label', '输入label:', acupuncturepoints)
                if ok and text:
                    self.scene.clearSelection()
                    self.pointsSignal.emit(text)
                    shape = GraphicItem()
                    shape.setPos(self.x1, self.y1)
                    shape.setBrush(Qt.blue)
                    self.itemsToShapes[text] = shape
                    self.shapesToItems[shape] = text
                    self.scene.addItem(shape)

                    self.bboxList.append([shape])
                    self.savePoint(self.x1, self.y1, text)

        if event.button() == Qt.MiddleButton:
            it = self.get_item_at_click(event)

        if event.button() == Qt.LeftButton:
            item = self.get_item_at_click(event)
            item.setSelected(True)

    def mouseMoveEvent(self, event):  #鼠标移动事件
        super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):  #鼠标释放事件
        super().mouseReleaseEvent(event)
        acupuncturerects = ('person', 'person2')
        if event.button() == Qt.RightButton and self.Rectmode:
            pt = self.mapToScene(event.pos())
            self.x2 = pt.x()
            self.y2 = pt.y()
            text, ok = QInputDialog().getItem(QWidget(), '添加Label', '输入label:', acupuncturerects)
            if ok and text:
                self.scene.clearSelection()
                self.pointsSignal.emit(text)
                item = GraphicsRectItem(self.x1, self.y1, self.x2-self.x1, self.y2-self.y1)
                self.itemsToShapes[text] = item
                self.shapesToItems[item] = text
                self.scene.addItem(item)
                self.bboxList.append([item])

                self.saveRect(self.x1, self.y1, self.x2, self.y2, text)
                self.scene.addItem(item)
        if event.button() == Qt.LeftButton:
            item = self.get_item_at_click(event)
            pt = self.mapToScene(event.pos())
            self.x1 = pt.x()
            self.y1 = pt.y()
            if isinstance(item, GraphicItem):
                index = self.findBboxItemIndexFromItem(item)
                self.bboxPointList[index][0] = self.x1
                self.bboxPointList[index][1] = self.y1

    def saveRect(self, x1, y1, x2, y2, text):  #保存矩形框信息
        bbox = [x1, y1, x2, y2, text]
        self.bboxPointList.append(bbox)

    def savePoint(self, x1, y1, text):  #保存点信息
        bbox = [x1, y1, text]
        self.bboxPointList.append(bbox)

    def wheelEvent(self, e):  #滚轮放缩
        if e.angleDelta().y() > 0:
            self.scale(1.1, 1.1)
        else:
            self.scale(1 / 1.1, 1 / 1.1)
        self.setTransformationAnchor(self.AnchorUnderMouse)

    def slotrectSignal(self):  #开启矩形框模式
        self.Rectmode = True

    def slotpointSignal(self):
        self.Rectmode = False

    def get_item_at_click(self, event):  #获取当前对象属性
        pos = event.pos()
        item = self.itemAt(pos)
        return item

    def findBboxItemIndexFromItem(self, item):
        for i,b in enumerate(self.bboxList):
            if b[0] == item:
                return i

class GraphicItem(QGraphicsEllipseItem):

    def __init__(self, parent=None):
        super().__init__(parent)
        pen = QPen()
        pen.setColor(QColor(0, 0, 0, 0))
        pen.setWidth(0.2)
        self.setPen(pen)
        self.pix = self.setRect(0, 0, 4, 4)
        self.setFlag(QGraphicsItem.ItemIsSelectable)
        self.setFlag(QGraphicsItem.ItemIsMovable)
        self.setAcceptHoverEvents(True)

    def hoverEnterEvent(self, event):
        self.setBrush(Qt.red)

    def hoverLeaveEvent(self, event):
        self.setBrush(Qt.blue)

    def mouseMoveEvent(self, event):   
        super().mouseMoveEvent(event)
        if self.isSelected():
            for gr_edge in self.scene().edges:
                gr_edge.edge_wrap.update_positions()

class GraphicsScene(QGraphicsScene):

    def __init__(self, parent=None):
        super().__init__(parent)
        self.edges = [] 

    def selectshape(self,e):
        e.setSelected(True)

    def add_edge(self, edge):
        self.edges.append(edge)
        self.addItem(edge)

class ListWidgetItem(QListWidgetItem):
    def __init__(self, *args):
        super(ListWidgetItem, self).__init__(*args)
    def __hash__(self):
        return hash(id(self))

class GraphicsRectItem(QGraphicsRectItem):  # 矩形框类

    handleTopLeft = 1
    handleBottomRight = 8

    handleSize = +8.0
    handleSpace = -4.0

    handleCursors = {
        handleTopLeft: Qt.SizeFDiagCursor,
        handleBottomRight: Qt.SizeFDiagCursor,
    }

    def __init__(self, *args):
        super().__init__(*args)
        self.handles = {}
        self.handleSelected = None
        self.mousePressPos = None
        self.mousePressRect = None
        self.setAcceptHoverEvents(True)
        self.setFlag(QGraphicsItem.ItemIsMovable, True)
        self.setFlag(QGraphicsItem.ItemIsSelectable, True)
        self.setFlag(QGraphicsItem.ItemSendsGeometryChanges, True)
        self.setFlag(QGraphicsItem.ItemIsFocusable, True)
        self.updateHandlesPos()
        self.setZValue(0)

    def handleAt(self, point):
        for k, v, in self.handles.items():
            if v.contains(point):
                return k
        return None

    def hoverMoveEvent(self, moveEvent):
        if self.isSelected():
            handle = self.handleAt(moveEvent.pos())
            cursor = Qt.ArrowCursor if handle is None else self.handleCursors[handle]
            self.setCursor(cursor)
        super().hoverMoveEvent(moveEvent)

    def hoverLeaveEvent(self, moveEvent):
        self.setCursor(Qt.ArrowCursor)
        super().hoverLeaveEvent(moveEvent)

    def mousePressEvent(self, mouseEvent):
        self.handleSelected = self.handleAt(mouseEvent.pos())
        if self.handleSelected:
            self.mousePressPos = mouseEvent.pos()
            self.mousePressRect = self.boundingRect()
        super().mousePressEvent(mouseEvent)

    def mouseMoveEvent(self, mouseEvent):
        if self.handleSelected is not None:
            self.interactiveResize(mouseEvent.pos())
        else:
            super().mouseMoveEvent(mouseEvent)

    def mouseReleaseEvent(self, mouseEvent):
        super().mouseReleaseEvent(mouseEvent)
        self.handleSelected = None
        self.mousePressPos = None
        self.mousePressRect = None
        self.update()

    def boundingRect(self):
        o = self.handleSize + self.handleSpace
        return self.rect().adjusted(-o, -o, o, o)

    def updateHandlesPos(self):
        s = self.handleSize
        b = self.boundingRect()
        self.handles[self.handleTopLeft] = QRectF(b.left(), b.top(), s, s)
        self.handles[self.handleBottomRight] = QRectF(b.right() - s, b.bottom() - s, s, s)

    def interactiveResize(self, mousePos):

        offset = self.handleSize + self.handleSpace
        boundingRect = self.boundingRect()
        rect = self.rect()
        diff = QPointF(0, 0)

        self.prepareGeometryChange()

        if self.handleSelected == self.handleTopLeft:

            fromX = self.mousePressRect.left()
            fromY = self.mousePressRect.top()
            toX = fromX + mousePos.x() - self.mousePressPos.x()
            toY = fromY + mousePos.y() - self.mousePressPos.y()
            diff.setX(toX - fromX)
            diff.setY(toY - fromY)
            boundingRect.setLeft(toX)
            boundingRect.setTop(toY)
            rect.setLeft(boundingRect.left() + offset)
            rect.setTop(boundingRect.top() + offset)
            self.setRect(rect)


        elif self.handleSelected == self.handleBottomRight:

            fromX = self.mousePressRect.right()
            fromY = self.mousePressRect.bottom()
            toX = fromX + mousePos.x() - self.mousePressPos.x()
            toY = fromY + mousePos.y() - self.mousePressPos.y()
            diff.setX(toX - fromX)
            diff.setY(toY - fromY)
            boundingRect.setRight(toX)
            boundingRect.setBottom(toY)
            rect.setRight(boundingRect.right() - offset)
            rect.setBottom(boundingRect.bottom() - offset)
            self.setRect(rect)

        self.updateHandlesPos()

    def paint(self, painter, option, widget=None):
        painter.setPen(QPen(QColor(0, 255, 255), 3.0, Qt.SolidLine))
        painter.drawRect(self.rect())

        painter.setRenderHint(QPainter.Antialiasing)
        painter.setBrush(QBrush(QColor(255, 0, 0, 255)))
        painter.setPen(QPen(QColor(0, 0, 0, 255), 1.0, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))
        for handle, rect in self.handles.items():
            if self.handleSelected is None or handle == self.handleSelected:
                painter.drawEllipse(rect)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_ShangYi()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
